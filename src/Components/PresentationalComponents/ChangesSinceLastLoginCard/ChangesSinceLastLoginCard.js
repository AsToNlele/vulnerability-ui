import { Card, CardBody, CardHeader, Gallery, GalleryItem, Title } from '@patternfly/react-core';
import { routerParams } from '@red-hat-insights/insights-frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { dispatchAction } from '../../../Helpers/MiscHelp';
import { fetchChangesSinceLastLogin } from '../../../Store/Actions/ChangesActions';
import { sChangesSince } from '../../../Store/Selectors/VulnerabilitiesSelectors';
import TrendBox from '../TrendBox/TrendBox';
import WithLoader from '../WithLoader/WithLoader';

class ChangesSinceLastLoginCard extends React.Component {
    constructor(props) {
        super(props);
    }

    componentDidMount() {
        this.props.fetchData();
    }
    render() {
        return (
            <Card id="current-vulnerabilities">
                <CardHeader>
                    <Title size="lg">Changes since last login</Title>
                </CardHeader>
                <CardBody>
                    <Gallery gutter="lg">
                        <GalleryItem variant="primary">
                            <WithLoader loading={this.props.changesSinceLastLogin.isLoading} variant="trendBox">
                                <TrendBox
                                    number={this.props.changesSinceLastLogin.content.newVulnerabilities.count}
                                    percentage={this.props.changesSinceLastLogin.content.newVulnerabilities.percentage}
                                    direction={this.props.changesSinceLastLogin.content.newVulnerabilities.direction}
                                    label={'New Vulnerabilities'}
                                />
                            </WithLoader>
                        </GalleryItem>

                        <GalleryItem variant="primary">
                            <WithLoader loading={this.props.changesSinceLastLogin.isLoading} variant="trendBox">
                                <TrendBox
                                    number={this.props.changesSinceLastLogin.content.newlyAffectedSystems.count}
                                    percentage={this.props.changesSinceLastLogin.content.newlyAffectedSystems.percentage}
                                    direction={this.props.changesSinceLastLogin.content.newlyAffectedSystems.direction}
                                    label={'Newly affected Systems/Groups'}
                                />
                            </WithLoader>
                        </GalleryItem>

                        <GalleryItem variant="primary">
                            <WithLoader loading={this.props.changesSinceLastLogin.isLoading} variant="trendBox">
                                <TrendBox
                                    number={this.props.changesSinceLastLogin.content.remediatedCVEs.count}
                                    percentage={this.props.changesSinceLastLogin.content.remediatedCVEs.percentage}
                                    direction={this.props.changesSinceLastLogin.content.remediatedCVEs.direction}
                                    label={'Remediated CVEs'}
                                />
                            </WithLoader>
                        </GalleryItem>
                    </Gallery>
                </CardBody>
            </Card>
        );
    }
}

ChangesSinceLastLoginCard.propTypes = {
    changesSinceLastLogin: propTypes.shape({
        content: propTypes.object,
        isLoading: propTypes.bool
    }),
    fetchData: propTypes.func
};

function mapStateToProps(state) {
    return {
        changesSinceLastLogin: sChangesSince(state)
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchData: () => dispatchAction(fetchChangesSinceLastLogin(), dispatch)
    };
};

export default routerParams(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(ChangesSinceLastLoginCard)
);
