import React from 'react';
import { Title, Card, CardHeader, CardBody, Split, SplitItem, Bullseye } from '@patternfly/react-core';
import propTypes from 'prop-types';
import TrendBox from './TrendBox';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { fetchChangesSinceLastLogin } from '../../../Store/Actions/ChangesActions';
import { PropagateLoader } from 'react-spinners';

class ChangesSinceLastLoginCard extends React.Component {
    constructor(props) {
        super(props);
    }

    componentDidMount() {
        this.props.fetchData();
    }
    render() {
        if (this.props.changesSinceLastLogin.isLoading) {
            return (
                <Bullseye>
                    <PropagateLoader color={'#00b9e4'} loading={true} />
                </Bullseye>
            );
        }

        return (
            <Card id="current-vulnerabilities">
                <CardHeader>
                    <Title size="lg">Changes since last login</Title>
                </CardHeader>
                <CardBody>
                    <Split gutter="lg">
                        <SplitItem variant="primary">
                            <TrendBox
                                number={this.props.changesSinceLastLogin.newVulnerabilities.number}
                                percentage={this.props.changesSinceLastLogin.newVulnerabilities.percentage}
                                direction={this.props.changesSinceLastLogin.newVulnerabilities.direction}
                                label={'New Vulnerabilities'}
                            />
                        </SplitItem>
                        <SplitItem variant="primary">
                            <TrendBox
                                number={this.props.changesSinceLastLogin.newlyAffectedSystems.number}
                                percentage={this.props.changesSinceLastLogin.newlyAffectedSystems.percentage}
                                direction={this.props.changesSinceLastLogin.newlyAffectedSystems.direction}
                                label={'Newly affected Systems/Groups'}
                            />
                        </SplitItem>
                        <SplitItem variant="primary">
                            <TrendBox
                                number={this.props.changesSinceLastLogin.remediatedCVEs.number}
                                percentage={this.props.changesSinceLastLogin.remediatedCVEs.percentage}
                                direction={this.props.changesSinceLastLogin.remediatedCVEs.direction}
                                label={'Remediated CVEs'}
                            />
                        </SplitItem>
                        <SplitItem variant="primary">
                            <TrendBox
                                number={this.props.changesSinceLastLogin.newlySecuredSystems.number}
                                percentage={this.props.changesSinceLastLogin.newlySecuredSystems.percentage}
                                direction={this.props.changesSinceLastLogin.newlySecuredSystems.direction}
                                label={'Newly secured Systems/Groups'}
                            />
                        </SplitItem>
                    </Split>
                </CardBody>
            </Card>
        );
    }
}

const propTypesTrendBox = propTypes.shape({
    number: propTypes.number,
    percentage: propTypes.number,
    direction: propTypes.string
});

ChangesSinceLastLoginCard.propTypes = {
    changesSinceLastLogin: propTypes.shape({
        newVulnerabilities: propTypesTrendBox,
        newlyAffectedSystems: propTypesTrendBox,
        remediatedCVEs: propTypesTrendBox,
        newlySecuredSystems: propTypesTrendBox,
        isLoading: propTypes.bool
    }),
    fetchData: propTypes.func
};

function mapStateToProps(state) {
    return {
        changesSinceLastLogin: {
            newVulnerabilities: state.ChangesStore.changesSinceLastLogin.newVulnerabilities,
            newlyAffectedSystems: state.ChangesStore.changesSinceLastLogin.newlyAffectedSystems,
            remediatedCVEs: state.ChangesStore.changesSinceLastLogin.remediatedCVEs,
            newlySecuredSystems: state.ChangesStore.changesSinceLastLogin.newlySecuredSystems,
            isLoading: state.ChangesStore.changesSinceLastLogin.isLoading
        }
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchData: () => dispatch(fetchChangesSinceLastLogin())
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(ChangesSinceLastLoginCard)
);
