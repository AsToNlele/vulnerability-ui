import {
    Dropdown,
    DropdownItem,
    DropdownToggle,
    Form,
    FormGroup,
    Select,
    SelectOption,
    Toolbar,
    ToolbarGroup,
    ToolbarItem
} from '@patternfly/react-core';
import { DownloadIcon } from '@patternfly/react-icons';
import { routerParams, SimpleTableFilter } from '@red-hat-insights/insights-frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchCveListWithAffectedSystems } from '../../../Store/Actions/VulnerabilitiesActions';
import { sCveTable } from '../../../Store/Selectors/VulnerabilitiesSelectors';
import './VulnerabilitiesCveTable.scss';

class VulnerabilitiesCveTableToolbar extends React.Component {
    constructor(props) {
        super(props);
        this.changeFilterValue = this.changeFilterValue.bind(this);
        this.changeCVSSValue = this.changeCVSSValue.bind(this);
        this.changeDateValue = this.changeDateValue.bind(this);
        this.state = {
            plansOpen: false,
            toolbarConfig: {
                fetch: true,
                filter: '',
                cvss_score: 'all',
                publicDate: 'all'
            }
        };
    }
    /*
    static getDerivedStateFromProps(props, state) {

        if (state.toolbarConfig.fetch && props.CVETable.meta.length !== 0) {
            console.log(props.CVETable.meta);
            let res = { ...state.toolbarConfig, ...props.CVETable.meta, fetch: false };
            return { toolbarConfig: res };
        }

        return null;

    }
    */

    toggleDropdown(key, value) {
        this.setState({ [key]: value });
    }

    changeFilterValue(value) {
        let toolbarConfig = { ...this.state.toolbarConfig, filter: value };
        this.setState({ toolbarConfig });
    }

    changeCVSSValue(value) {
        this.setState({ toolbarConfig: { ...this.state.toolbarConfig, cvss_score: value } });
    }

    changeDateValue(value) {
        let toolbarConfig = { ...this.state.toolbarConfig, publicDate: value };
        this.setState({ toolbarConfig });
    }
    render() {
        let dropdownItems = [
            <DropdownItem key="addToPlan">Add to plan</DropdownItem>,
            <DropdownItem key="createPlan">Create plan</DropdownItem>,
            <DropdownItem key="showPlans">Show plans containing this CVE</DropdownItem>
        ];
        let CVSSOptions = [
            { value: 'all', label: 'All', disabled: false },
            { value: 'lt4', label: 'Lower than 4', disabled: false },
            { value: '4to6', label: '4 - 6', disabled: false },
            { value: '6to8', label: '6 - 8', disabled: false },
            { value: '8to10', label: '8 - 10', disabled: false }
        ];
        let DateOptions = [{ value: 'All', label: 'All', disabled: false }, { value: 'Other', label: 'Other', disabled: false }];
        return (
            <React.Fragment>
                <Toolbar className="cvetable-toolbar">
                    <ToolbarGroup className="filterCVES">
                        <ToolbarItem>
                            <SimpleTableFilter
                                onFilterChange={this.changeFilterValue}
                                onButtonClick={() => this.props.applyToolbarConfig(this.state.toolbarConfig)}
                            />
                        </ToolbarItem>
                    </ToolbarGroup>
                    <ToolbarGroup className="space-between-toolbar-items">
                        <ToolbarItem>
                            <Form>
                                <FormGroup label="CVSS Base Score" fieldId="cvssScore">
                                    <Select
                                        id="cvssScore"
                                        onChange={this.changeCVSSValue}
                                        value={this.state.toolbarConfig.cvss_score}
                                    >
                                        {CVSSOptions.map((option, index) => (
                                            <SelectOption
                                                isDisabled={option.disabled}
                                                key={index}
                                                value={option.value}
                                                label={option.label}
                                            />
                                        ))}
                                    </Select>
                                </FormGroup>
                            </Form>
                        </ToolbarItem>
                        <ToolbarItem>
                            <Form>
                                <FormGroup label="Public date" fieldId="publicDate">
                                    <Select
                                        id="publicDate"
                                        value={this.state.toolbarConfig.publicDate}
                                        onChange={this.changeDateValue}
                                    >
                                        {DateOptions.map((option, index) => (
                                            <SelectOption
                                                isDisabled={option.disabled}
                                                key={index}
                                                value={option.value}
                                                label={option.label}
                                            />
                                        ))}
                                    </Select>
                                </FormGroup>
                            </Form>
                        </ToolbarItem>
                        <ToolbarItem>
                            <Dropdown
                                id="plans"
                                toggle={
                                    <DropdownToggle onToggle={value => this.toggleDropdown('plansOpen', value)}>
                                        Plans
                                    </DropdownToggle>
                                }
                                isOpen={this.state.plansOpen}
                                dropdownItems={dropdownItems}
                            />
                        </ToolbarItem>
                    </ToolbarGroup>
                    <ToolbarGroup>
                        <ToolbarItem>
                            <DownloadIcon size="md" />
                        </ToolbarItem>
                    </ToolbarGroup>
                </Toolbar>
            </React.Fragment>
        );
    }
}

VulnerabilitiesCveTableToolbar.propTypes = {
    CVETable: dataShape,
    fetchData: propTypes.func,
    applyToolbarConfig: propTypes.func
};

function mapStateToProps(state) {
    return {
        CVETable: sCveTable(state)
    };
}

const mapDispatchToProps = () => {
    return {
        applyToolbarConfig: params => dispatchAction(fetchCveListWithAffectedSystems(params))
    };
};

export default routerParams(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(VulnerabilitiesCveTableToolbar)
);
