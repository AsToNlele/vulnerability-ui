import { Checkbox, Form, FormGroup, Select, SelectOption, Toolbar, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';
import { DownloadIcon } from '@patternfly/react-icons';
import { routerParams, SimpleTableFilter } from '@red-hat-insights/insights-frontend-components';
import { debounce } from 'lodash';
import propTypes from 'prop-types';
import React from 'react';
import { dataShape } from '../../../Helpers/MiscHelper';
import './VulnerabilitiesCveTable.scss';

class VulnerabilitiesCveTableToolbar extends React.Component {
    constructor(props) {
        super(props);
        this.changeFilterValue = debounce(this.changeFilterValue.bind(this), 400);
        this.changeCVSSValue = this.changeCVSSValue.bind(this);
        this.changeDateValue = this.changeDateValue.bind(this);
        this.getCVSSValue = this.getCVSSValue.bind(this);
        this.apply = this.apply.bind(this);
        this.state = {
            defaultConfig: {
                filter: '',
                cvss_score: 'all',
                publicDate: 'all',
                show_all: 'False'
            },
            toolbarConfig: {}
        };
    }

    apply() {
        this.props.apply(this.state.toolbarConfig);
    }
    changeFilterValue(value) {
        let toolbarConfig = { ...this.state.toolbarConfig, filter: value };
        debounce(this.setState({ toolbarConfig }, this.apply), 400);
    }

    changeCVSSValue(value, options) {
        let target = options.find(item => item.value === value);
        this.setState({ toolbarConfig: { ...this.state.toolbarConfig, cvss_from: target.from, cvss_to: target.to } }, this.apply);
    }

    changeDateValue(value) {
        let toolbarConfig = { ...this.state.toolbarConfig, publicDate: value };
        this.setState({ toolbarConfig }, this.apply);
    }

    changeCheckboxValue(value) {
        let toolbarConfig = { ...this.state.toolbarConfig, show_all: value };
        this.setState({ toolbarConfig }, this.apply);
    }

    getCVSSValue(options) {
        let id = options.findIndex(
            item => item.from === this.state.toolbarConfig.cvss_from && item.to === this.state.toolbarConfig.cvss_to
        );
        id = id === -1 ? 0 : id;
        return options[id].value;
    }

    render() {
        let CVSSOptions = [
            { value: 'all', label: 'All', disabled: false, from: '', to: '' },
            { value: '0to3', label: 'Lower than 3', disabled: false, from: '', to: 3 },
            { value: '3to7', label: '3 - 7', disabled: false, from: 3, to: 7 },
            { value: '7to10', label: '7 - 10', disabled: false, from: 7, to: 10 }
        ];
        let DateOptions = [{ value: 'All', label: 'All', disabled: false }, { value: 'Other', label: 'Other', disabled: false }];
        let showAll = (
            <React.Fragment>
                <br />
                <Checkbox
                    label="Display CVEs that don't affect any of my systems"
                    isChecked={this.state.toolbarConfig.show_all}
                    onChange={state => this.changeCheckboxValue(state)}
                    aria-label="controlled checkbox example"
                    id="check-1"
                />
            </React.Fragment>
        );
        return (
            <React.Fragment>
                <Toolbar className="cvetable-toolbar">
                    <ToolbarGroup className="filterCVES">
                        <ToolbarItem>
                            <SimpleTableFilter onFilterChange={this.changeFilterValue} onButtonClick={this.apply} />
                        </ToolbarItem>
                    </ToolbarGroup>
                    <ToolbarGroup className="space-between-toolbar-items">
                        <ToolbarItem>
                            <Form>
                                <FormGroup label="CVSS Base Score" fieldId="cvssScore">
                                    <Select
                                        id="cvssScore"
                                        onChange={value => this.changeCVSSValue(value, CVSSOptions)}
                                        value={this.getCVSSValue(CVSSOptions)}
                                    >
                                        {CVSSOptions.map((option, index) => (
                                            <SelectOption
                                                isDisabled={option.disabled}
                                                key={index}
                                                value={option.value}
                                                label={option.label}
                                            />
                                        ))}
                                    </Select>
                                </FormGroup>
                            </Form>
                        </ToolbarItem>
                        <ToolbarItem>
                            <Form>
                                <FormGroup label="Public date" fieldId="publicDate">
                                    <Select
                                        id="publicDate"
                                        value={this.state.toolbarConfig.publicDate}
                                        onChange={this.changeDateValue}
                                    >
                                        {DateOptions.map((option, index) => (
                                            <SelectOption
                                                isDisabled={option.disabled}
                                                key={index}
                                                value={option.value}
                                                label={option.label}
                                            />
                                        ))}
                                    </Select>
                                </FormGroup>
                            </Form>
                        </ToolbarItem>
                    </ToolbarGroup>
                    <ToolbarGroup>
                        <ToolbarItem>{!this.props.showAllCheckbox || showAll}</ToolbarItem>
                    </ToolbarGroup>
                    <ToolbarGroup className="space-between-toolbar-items">
                        <ToolbarItem>
                            <DownloadIcon size="lg" />
                        </ToolbarItem>
                        <ToolbarItem>{this.props.totalNumber} Results</ToolbarItem>
                    </ToolbarGroup>
                </Toolbar>
            </React.Fragment>
        );
    }
}

VulnerabilitiesCveTableToolbar.propTypes = {
    CVETable: dataShape,
    fetchData: propTypes.func,
    applyToolbarConfig: propTypes.func,
    apply: propTypes.func,
    showAllCheckbox: propTypes.bool,
    totalNumber: propTypes.number
};

export default routerParams(VulnerabilitiesCveTableToolbar);
