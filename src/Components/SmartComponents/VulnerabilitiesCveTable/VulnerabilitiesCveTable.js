import { Pagination, routerParams, Table } from '@red-hat-insights/insights-frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { dispatchAction } from '../../../Helpers/MiscHelper';
import { fetchCveListWithAffectedSystems } from '../../../Store/Actions/VulnerabilitiesActions';
import { sCveTable } from '../../../Store/Selectors/VulnerabilitiesSelectors';
import WithLoader from '../../PresentationalComponents/WithLoader/WithLoader';
import './VulnerabilitiesCveTable.scss';

class VulnerabilitiesCveTable extends React.Component {
    handleRedirect(key) {
        this.props.history.push('/cves/' + key);
    }

    componentDidMount() {
        this.props.fetchData();
    }
    render() {
        return (
            <React.Fragment>
                <WithLoader loading={this.props.CVETable.isLoading}>
                    <Table
                        header={[
                            { title: 'Impact', width: 5 },
                            { title: 'Name', width: 10 },
                            { title: 'Description', width: 60 },
                            { title: 'CVSS Base Score', width: 5 },
                            { title: 'Systems Exposed', width: 5 },
                            { title: 'Reboot?', width: 5 },
                            { title: 'Publish date', width: 10 }
                        ]}
                        rows={this.props.CVETable.data}
                        onRowClick={(event, key) => this.handleRedirect(key)}
                        footer={
                            <Pagination
                                numberOfItems={this.props.CVETable.meta.total || 1}
                                itemsPerPage={this.props.CVETable.meta.per_page || 10}
                            />
                        }
                    />
                </WithLoader>
            </React.Fragment>
        );
    }
}

function mapStateToProps(state) {
    return {
        CVETable: sCveTable(state)
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchData: () => dispatchAction(fetchCveListWithAffectedSystems(), dispatch)
    };
};

VulnerabilitiesCveTable.propTypes = {
    CVETable: propTypes.object,
    fetchData: propTypes.func,
    history: propTypes.object
};

export default routerParams(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(VulnerabilitiesCveTable)
);
