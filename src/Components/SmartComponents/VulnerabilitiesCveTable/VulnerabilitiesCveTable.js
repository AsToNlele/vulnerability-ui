import { Pagination, routerParams, Table } from '@red-hat-insights/insights-frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchCveListByAccount } from '../../../Store/Actions/VulnerabilitiesActions';
import { sCveTableByAccount } from '../../../Store/Selectors/VulnerabilitiesSelectors';
import WithLoader from '../../PresentationalComponents/WithLoader/WithLoader';
import './VulnerabilitiesCveTable.scss';

class VulnerabilitiesCveTable extends React.Component {
    handleRedirect(key) {
        this.props.history.push('/cves/' + key);
    }

    componentDidMount() {
        this.props.fetchData(this.props.fetchResource);
    }
    render() {
        const data = this.props.dataSelector(this.props.CVETable);
        return (
            <React.Fragment>
                <WithLoader loading={data.isLoading}>
                    <Table
                        header={this.props.header}
                        rows={data.data}
                        onRowClick={(event, key) => this.handleRedirect(key)}
                        footer={<Pagination numberOfItems={data.meta.total || 1} itemsPerPage={data.meta.per_page || 10} />}
                    />
                </WithLoader>
            </React.Fragment>
        );
    }
}

function mapStateToProps(state) {
    return {
        CVETable: state
    };
}

const mapDispatchToProps = () => {
    return {
        fetchData: action => dispatchAction(action())
    };
};

VulnerabilitiesCveTable.defaultProps = {
    fetchResource: fetchCveListByAccount,
    header: [
        { title: 'Impact', width: 5 },
        { title: 'Name', width: 10 },
        { title: 'Description', width: 60 },
        { title: 'CVSS Base Score', width: 5 },
        { title: 'Systems Exposed', width: 5 },
        { title: 'Reboot?', width: 5 },
        { title: 'Publish date', width: 10 }
    ],
    dataSelector: sCveTableByAccount
};

VulnerabilitiesCveTable.propTypes = {
    CVETable: dataShape,
    fetchData: propTypes.func,
    history: propTypes.object,
    fetchResource: propTypes.func,
    header: propTypes.array,
    dataSelector: propTypes.func
};

export default routerParams(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(VulnerabilitiesCveTable)
);
