import { Pagination, routerParams, SortDirection, Table } from '@red-hat-insights/insights-frontend-components';
import { findIndex } from 'lodash';
import propTypes from 'prop-types';
import React from 'react';
import { dataShape } from '../../../Helpers/MiscHelper';
import WithLoader from '../../PresentationalComponents/WithLoader/WithLoader';
import './VulnerabilitiesCveTable.scss';

class VulnerabilitiesCveTable extends React.Component {
    constructor(props) {
        super(props);
        this.changePage = this.changePage.bind(this);
        this.setPageSize = this.setPageSize.bind(this);
        this.createPagination = this.createPagination.bind(this);
        this.sortColumn = this.sortColumn.bind(this);
    }

    handleRedirect(key) {
        this.props.history.push('/cves/' + key);
    }

    changePage(page) {
        this.props.apply({ page });
    }

    setPageSize(pageSize) {
        this.props.apply({ page_size: pageSize });
    }

    sortColumn(key, direction) {
        let columnName = this.props.header[key].key;
        if (direction === SortDirection.down) {
            columnName = '-' + columnName;
        }

        this.props.apply({ sort: columnName });
    }
    createPagination() {
        return (
            <Pagination
                page={this.props.cves.meta.page}
                numberOfItems={this.props.cves.meta.total_items}
                itemsPerPage={this.props.cves.meta.page_size}
                onSetPage={page => this.changePage(page)}
                onPerPageSelect={pageSize => this.setPageSize(pageSize)}
            />
        );
    }

    createSortBy(value) {
        if (value) {
            let direction = value[0] === '+' ? SortDirection.up : SortDirection.down;
            value = value.replace(/^(-|\+)/, '');
            const index = findIndex(this.props.header, item => item.key === value).toString();
            let sort = {
                index,
                direction
            };
            return sort;
        }

        return {};
    }

    render() {
        return (
            <React.Fragment>
                <WithLoader loading={this.props.cves.isLoading}>
                    {this.createPagination()}
                    <Table
                        header={this.props.header}
                        rows={this.props.cves.data}
                        onRowClick={(event, key) => this.handleRedirect(key)}
                        sortBy={this.createSortBy(this.props.cves.meta.sort)}
                        onSort={(event, colKey, direction) => this.sortColumn(colKey, direction)}
                    />
                </WithLoader>
            </React.Fragment>
        );
    }
}

VulnerabilitiesCveTable.propTypes = {
    cves: dataShape,
    header: propTypes.array,
    history: propTypes.object,
    apply: propTypes.func
};
export default routerParams(VulnerabilitiesCveTable);
