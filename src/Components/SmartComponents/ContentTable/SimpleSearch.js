import React, {Component} from 'react';
import {Alert} from '@red-hat-insights/insights-frontend-components';
import {RouteComponentProps as RouteProps, withRouter} from 'react-router-dom';
import {Button} from '@patternfly/react-core';
import {Card} from '@red-hat-insights/insights-frontend-components';
import {CardContent} from '@red-hat-insights/insights-frontend-components';
import {CardFooter} from '@red-hat-insights/insights-frontend-components';
import {CardHeader} from '@red-hat-insights/insights-frontend-components';
import {PageHeader} from '@red-hat-insights/insights-frontend-components';
import {PageHeaderTitle} from '@red-hat-insights/insights-frontend-components';
import {PF3Button} from '@red-hat-insights/insights-frontend-components';
import {Section} from '@red-hat-insights/insights-frontend-components';
import {Tabs} from '@red-hat-insights/insights-frontend-components';
import {TabPane} from '@red-hat-insights/insights-frontend-components';
import {Tooltip} from '@red-hat-insights/insights-frontend-components';
import {connect} from 'react-redux';
import {searchCVEs} from "Api/VMaaS/getCves";

class SimpleSearch extends Component<RouteProps<any> & Props, State> {
    constructor(props) {
        super(props);
        this.updateState = this.updateState.bind(this);
    }

    updateState(e) {
        e.preventDefault();
        this.props.searchCVEs(e.target.value);
    }

    render() {
        return (
            <form className="pf-l-stack__item pf-m-gutter pf-c-form  pf-m-6-col">
                <div className="pf-c-form__group ">
                    <label className="pf-c-form__label"></label>
                    <div className="pf-c-form__control ">
                        <button className="pf-c-button pf-m-secondary">
                            <i className="fas fa-search"></i>
                        </button>
                        <input name="searchInput" className="pf-c-form__input" value={this.props.searchInput || ''}
                               onChange={this.updateState}/>

                    </div>
                </div>
            </form>
    );
    }
    }

    function mapStateToProps(state) {
        return ({
        searchInput: state.cveList.filterValue
    })

    }

    const mapDispatchToProps = (dispatch) => {
        return {
        searchCVEs: (value) => dispatch(searchCVEs(value))
    }
    };

    export default connect(mapStateToProps, mapDispatchToProps)(SimpleSearch);
