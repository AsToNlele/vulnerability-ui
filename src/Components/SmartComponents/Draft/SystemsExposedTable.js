import React from 'react';
import './VulnerabilitiesOverview.scss';
import { Table, Pagination, Ansible } from '@red-hat-insights/insights-frontend-components';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { fetchCVEsWithSystems } from '../../../Store/Actions/CVEActions';
import { sExposedSystemsTable } from '../../../Helpers/Selectors/CVESelectors';
import propTypes from 'prop-types';
import { Grid, GridItem, Button, Badge } from '@patternfly/react-core';

class SystemsExposedTable extends React.Component {
    constructor(props) {
        super(props);
        this.checkItem = this.checkItem.bind(this);
        this.state = {
            systemList: []
        };
    }

    static getDerivedStateFromProps(props, state) {
        if (state.systemList === undefined || state.systemList.length === 0) {
            return { systemList: props.cveTableRows };
        }

        return {};
    }

    componentDidMount() {
        this.props.fetchData();
    }

    getSelectedCount() {
        let selected = this.state.systemList.filter(item => item.selected === true);
        return selected.length;
    }

    checkItem(key, value) {
        let newList = this.state.systemList;
        newList[key].selected = value;
        this.setState({ systemList: newList });
    }
    handleRedirect(key) {
        this.props.history.push('/vulnerabilities/cves/' + this.props.cveTableRows[key].synopsis);
    }
    render() {
        return (
            <React.Fragment>
                <Grid gutter="sm">
                    <GridItem span={12}>
                        <Pagination
                            numberOfItems={this.props.cveTableRows ? this.props.cveTableRows.length : 1}
                            itemsPerPage={50}
                        />
                        <Table
                            className="systems-exposed-table"
                            header={['Type', 'Name', '']}
                            rows={this.state.systemList}
                            hasCheckbox={true}
                            onItemSelect={(event, key, value) => this.checkItem(key, value)}
                        />
                    </GridItem>
                    <GridItem>
                        <Grid gutter="sm">
                            <GridItem span={9}>
                                Systems selected: <Badge isRead={true}>{this.getSelectedCount()}</Badge>
                            </GridItem>
                            <GridItem span={3}>
                                <Grid gutter="sm">
                                    <GridItem span={6}>
                                        <Button variant="secondary" isDisabled={this.getSelectedCount() === 0}>
                                            <Ansible />
                                            Generate Playbook
                                        </Button>
                                    </GridItem>
                                    <GridItem span={6}>
                                        <Button variant="secondary" isDisabled={this.getSelectedCount() === 0}>
                                            Add to plan
                                        </Button>
                                    </GridItem>
                                </Grid>
                            </GridItem>
                        </Grid>
                    </GridItem>
                </Grid>
            </React.Fragment>
        );
    }
}
function mapStateToProps(state) {
    return {
        cve: state.CVEStore.cveListWithSystems,
        cveTableRows: sExposedSystemsTable(state)
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchData: () => dispatch(fetchCVEsWithSystems())
    };
};

SystemsExposedTable.propTypes = {
    history: propTypes.object,
    cveTableRows: propTypes.array,
    fetchData: propTypes.func
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(SystemsExposedTable)
);
