import React, { Component } from 'react';
import { withRouter } from 'react-router-dom';
import { PageHeader } from '@red-hat-insights/insights-frontend-components';
import { PageHeaderTitle } from '@red-hat-insights/insights-frontend-components';
import { Section } from '@red-hat-insights/insights-frontend-components';
import ContentTable from '../ContentTable/ContentTable';
import SimpleSearch from '../ContentTable/SimpleSearch';
import { connect } from 'react-redux';
import { fetchCVEListFromVMaaS } from '../../../Store/Actions/CVEActions';
import { CVEProperties } from '../../PresentationalComponents/Vulnerability/CVERow';
import propTypes from 'prop-types';
import { searchCVEs } from '../../../Store/Actions/CVEActions';

class CVEBrowser extends Component {
    constructor(props) {
        super(props);
        this.state = {
            filteredCves: [],
            tableHead: []
        };
    }

    fetchData(apiProps) {
        let defaultProps = {
            page: this.props.cveListProps.page,
            page_size: this.props.cveListProps.pageSize,
            cve_list: [this.props.searchFilter]
        };
        this.props.fetchDataVMaaS({ ...defaultProps, ...apiProps });
    }

    componentDidMount() {
        this.fetchData();
    }

    handleRedirect(url) {
        this.props.history.push(url);
        this.fetchData();
    }

    render() {
        let tableHead = Object.keys(CVEProperties).map(value => <th key={value}>{CVEProperties[value]}</th>);
        let cveListProperties = {
            ...this.props.cveListProps,
            tableHead,
            isLoading: this.props.isLoading,
            fetchData: apiProps => this.fetchData(apiProps)
        };
        return (
            <div className="pf-l-stack">
                <div className="pf-l-stack__item pf-m-secondary ">
                    <PageHeader>
                        <PageHeaderTitle title="CVE Browser" />
                    </PageHeader>
                </div>

                <Section type="content">
                    <div className="pf-c-card ">
                        <div className="pf-c-card__body ">
                            <SimpleSearch
                                searchValue={this.props.searchFilter}
                                fetchData={apiProps => this.fetchData(apiProps)}
                                searchCallback={input => this.props.searchCVEs(input)}
                            />
                        </div>
                    </div>
                    <br />

                    <div className="pf-l-stack__item pf-m-primary pf-m-gutter">
                        <ContentTable {...cveListProperties} />
                    </div>
                </Section>
            </div>
        );
    }
}

function mapStateToProps(state) {
    return {
        cveListProps: {
            items: state.CVEStore.cveItems,
            page: state.CVEStore.page,
            pageSize: state.CVEStore.pageSize,
            pages: state.CVEStore.pages
        },
        isLoading: state.CVEStore.isLoading,
        searchFilter: state.CVEStore.filterValue
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchDataVMaaS: apiProps => dispatch(fetchCVEListFromVMaaS(apiProps)),
        searchCVEs: value => dispatch(searchCVEs(value))
    };
};

CVEBrowser.propTypes = {
    cveListProps: propTypes.object,
    isLoading: propTypes.bool,
    searchFilter: propTypes.string,
    history: propTypes.object,
    fetchDataVMaaS: propTypes.func,
    searchCVEs: propTypes.func
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(CVEBrowser)
);
