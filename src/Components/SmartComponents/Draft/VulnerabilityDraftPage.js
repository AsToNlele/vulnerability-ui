import React, { Component } from 'react';
import { withRouter } from 'react-router-dom';
import { Button } from '@patternfly/react-core';
import { PageHeader } from '@red-hat-insights/insights-frontend-components';
import { PageHeaderTitle } from '@red-hat-insights/insights-frontend-components';
import { Section } from '@red-hat-insights/insights-frontend-components';
import ContentTable from 'Components/SmartComponents/ContentTable/ContentTable';
import SimpleSearch from 'Components/SmartComponents/ContentTable/SimpleSearch';
import { connect } from 'react-redux';
import { fetchCVEList, fetchCVEListFromVMaaS } from 'Store/Actions/CVEActions';
import { CVEProperties } from 'Components/PresentationalComponents/Vulnerability/CVERow';
import CVENumberAlert from 'Components/PresentationalComponents/Vulnerability/CVENumberAlert';
import propTypes from 'prop-types';

class VulnerabilityDraftPage extends Component {
    constructor(props) {
        super(props);
        this.state = {
            filteredCves: [],
            tableHead: []
        };
    }

    fetchData() {
        let page = window.location.pathname.split('/').slice(-1)[0];
        switch (page) {
            case 'vulnerabilitiesDummy':
                this.props.fetchDataDummy();
                break;
            case 'vulnerabilitiesVmaas':
                this.props.fetchDataVMaaS();
                break;
            default:
                this.props.fetchDataDummy();
        }
    }

    static getDerivedStateFromProps(props, state) {
        if (props.cveList !== state.cveList) {
            let filteredCves = props.cveList.filter(row => {
                let stringC = row.props.synopsis.props.children;
                return stringC.indexOf(props.searchFilter) !== -1;
            });

            let tableHead = Object.keys(CVEProperties).map(value => <th key={value}>{CVEProperties[value]}</th>);
            return {
                filteredCves,
                tableHead
            };
        }
    }

    componentDidMount() {
        this.fetchData();
    }

    handleRedirect(url) {
        this.props.history.push(url);
        this.fetchData();
    }

    render() {
        return (
            <div className="pf-l-stack">
                <div className="pf-l-stack__item pf-m-secondary ">
                    <PageHeader>
                        <PageHeaderTitle title="Vulnerabilities" />
                    </PageHeader>
                </div>

                <Section type="content">
                    <div className="pf-c-card ">
                        <div className="pf-c-card__body ">
                            <div className="pf-l-gallery ">
                                <div className="pf-l-gallery__item">
                                    <Button variant="primary" onClick={() => this.handleRedirect('/vulnerabilities')}>
                                        Static data
                                    </Button>
                                </div>
                                <div className="pf-l-gallery__item">
                                    <Button variant="primary" onClick={() => this.handleRedirect('/vulnerabilitiesVmaas')}>
                                        VMaaS data
                                    </Button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <br />
                    <br />
                    <div className="pf-l-grid pf-m-gutters">
                        <div className="pf-l-grid__item pf-m-8-col">
                            <div className="pf-c-card " style={{ minHeight: '152px' }}>
                                <div className="pf-c-card__body " style={{ lineHeight: '152px' }}>
                                    <div className="pf-l-stack__item pf-m-primary pf-m-gutter">
                                        <SimpleSearch />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div className="pf-l-grid__item pf-m-4-col">
                            <div className="pf-c-card ">
                                <div className="pf-c-card__body ">
                                    <CVENumberAlert
                                        filteredNumber={this.state.filteredCves.length}
                                        allNumber={this.props.cveList.length}
                                    />
                                </div>
                            </div>
                        </div>
                        <br />
                    </div>
                    <div className="pf-l-stack__item pf-m-primary pf-m-gutter">
                        <ContentTable
                            filteredCves={this.state.filteredCves}
                            isLoading={this.props.isLoading}
                            tableHead={this.state.tableHead}
                        />
                    </div>
                </Section>
            </div>
        );
    }
}

function mapStateToProps(state) {
    return {
        cveList: state.CVEStore.cveList,
        isLoading: state.CVEStore.isLoading,
        searchFilter: state.CVEStore.filterValue
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchDataDummy: () => dispatch(fetchCVEList()),
        fetchDataVMaaS: () => dispatch(fetchCVEListFromVMaaS())
    };
};

VulnerabilityDraftPage.propTypes = {
    cveList: propTypes.array,
    isLoading: propTypes.bool,
    searchFilter: propTypes.string,
    history: propTypes.object,
    fetchDataDummy: propTypes.func,
    fetchDataVMaaS: propTypes.func
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(VulnerabilityDraftPage)
);
