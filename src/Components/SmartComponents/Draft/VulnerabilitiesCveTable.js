import React from 'react';
import './VulnerabilitiesOverview.scss';
import { Table, Pagination } from '@red-hat-insights/insights-frontend-components';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { fetchCVEsWithSystems } from '../../../Store/Actions/CVEActions';
import { sCvesWithSystemsTable } from '../../../Helpers/Selectors/CVESelectors';
import propTypes from 'prop-types';

class VulnerabilitiesCveTable extends React.Component {
    constructor(props) {
        super(props);
        this.sort = this.sort.bind(this);
        this.state = {
            cveList: []
        };
    }

    static getDerivedStateFromProps(props, state) {
        if (state.cveList === undefined || state.cveList.length === 0) {
            return { cveList: props.cveTableRows };
        }

        return {};
    }
    componentDidMount() {
        this.props.fetchData();
    }

    sort(key, value) {
        let sorted = this.state.cveList;
        switch (key) {
            case 0:
            case 3:
                sorted.sort((a, b) => this.compare(a.cells[3].props.severity, b.cells[3].props.severity, value));
                break;
            case 1:
                sorted.sort((a, b) => this.compare(a.cells[1].props.children.length, b.cells[1].props.children.length, value));
                break;
            case 2:
                sorted.sort((a, b) =>
                    this.compare(
                        a.cells[key].props.children.props.children[0].props.children.props.children,
                        b.cells[key].props.children.props.children[0].props.children.props.children,
                        value
                    )
                );
                break;
            case 4:
                sorted.sort((a, b) => this.compare(a.cells[4], b.cells[4], value));
        }

        this.setState({ cveList: sorted });
    }

    compare(a, b, direction) {
        if (direction === 'up') {
            return a > b;
        } else {
            return a < b;
        }
    }
    handleRedirect(key) {
        this.props.history.push('/cves/' + this.state.cveList[key].synopsis);
    }
    render() {
        return (
            <React.Fragment>
                <Pagination numberOfItems={112210} itemsPerPage={10} pages={2500} />
                <Table
                    className="cve-table"
                    header={['Impact', 'Synopsis', 'Affected Systems', 'Total Risk', 'Description']}
                    rows={this.state.cveList}
                    onRowClick={(event, key) => this.handleRedirect(key)}
                    onSort={(event, key, value) => this.sort(key, value)}
                />
            </React.Fragment>
        );
    }
}
function mapStateToProps(state) {
    return {
        cve: state.CVEStore.cveListWithSystems,
        cveTableRows: sCvesWithSystemsTable(state)
    };
}

const mapDispatchToProps = dispatch => {
    return {
        fetchData: () => dispatch(fetchCVEsWithSystems())
    };
};

VulnerabilitiesCveTable.propTypes = {
    history: propTypes.object,
    cveTableRows: propTypes.array,
    fetchData: propTypes.func
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(VulnerabilitiesCveTable)
);
