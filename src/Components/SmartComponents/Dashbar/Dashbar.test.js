import Dashbar from "./Dashbar";
import { Card, Grid } from "@patternfly/react-core";
import toJson from "enzyme-to-json";
import { mountWithIntl } from "../../../Helpers/MiscHelper";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import { BrowserRouter as Router } from "react-router-dom";
import { DashbarItem } from './Dashbar'

jest.mock("react-redux", () => ({
    ...jest.requireActual("react-redux"),
    useSelector: jest.fn(),
}));

const mockStore = configureStore([(store) => (next) => (action) => { }]);
let store = mockStore({});

jest.mock("../../../Helpers/MiscHelper", () => ({
    ...jest.requireActual("../../../Helpers/MiscHelper"),
    useUrlParams: () => [{ dashbar: "true" }, jest.fn()],
}));


jest.mock("../../../Helpers/APIHelper", () => ({
    ...jest.requireActual("../../../Helpers/APIHelper"),
    getAnnouncement: () => new Promise((resolve) => resolve({ message: "Message test!" })),
    getDashbar: () => new Promise((resolve) => resolve({ exploitable_cves: 1, cves_with_rule: 2, critical_cves: 3, important_cves: 4 }))
}))

describe("Dashbar", () => {
    it("Should match the snapshot", async () => {

        const wrapper = await mountWithIntl(
            <Provider store={store}>
                <Router>
                    <Dashbar />
                </Router>
            </Provider>
        );
        wrapper.update()
        expect(toJson(wrapper)).toMatchSnapshot();
    });
    it("Should render Grid with props hasGutter = true", async () => {
        const wrapper = await mountWithIntl(
            <Provider store={store}>
                <Router>
                    <Dashbar />
                </Router>
            </Provider>
        );
        wrapper.update()
        expect(wrapper.find(Grid)).toHaveLength(1);
        expect(wrapper.find(Grid).prop("hasGutter")).toBeTruthy();
    });
    it("Should have 4 DashbarItems", async () => {
        const wrapper = await mountWithIntl(
            <Provider store={store}>
                <Router>
                    <Dashbar />
                </Router>
            </Provider>
        );
        wrapper.update()
        expect(wrapper.find(DashbarItem)).toHaveLength(4);
    });
});
