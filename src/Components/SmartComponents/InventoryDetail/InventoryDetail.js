import * as reactCore from '@patternfly/react-core';
import { Page } from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import { Main } from '@redhat-cloud-services/frontend-components';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';
import { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';

class InventoryDetail extends React.Component {
    static propTypes = {
        cve: propTypes.string,
        fetchData: propTypes.func,
        affectedSystems: dataShape
    };

    constructor(props) {
        super(props);

        this.state = {
            inventoryId: this.props.match.params.inventoryId,
            InventoryCmp: () => <div>Loading...</div>,
            removeListener: () => {}
        };
    }

    componentDidMount() {
        this.props.fetchSystemDetails(this.state.inventoryId);
        this.fetchInventory();
    }

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons
        });

        ReducerRegistry.register({
            ...mergeWithEntities(),
            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES))
        });

        this.setState({
            InventoryHeader: inventoryConnector().InventoryDetailHead,
            InventoryBody: inventoryConnector().AppInfo
        });
        this.state.removeListener();
    }

    checkItem = (key, value) => {
        let newList = this.state.systemList;
        newList[key].selected = value;
        this.setState({ systemList: newList });
    };

    render() {
        const { InventoryHeader, InventoryBody, inventoryId } = this.state;
        const { systemDetails, optOutSystem } = this.props;
        return (
            <Page>
                <VulnerabilityHeader title="" showTabs={false}>
                    {InventoryHeader && (
                        <InventoryHeader
                            hideBack
                            actions={[
                                {
                                    title: 'Hide from vulnerability reporting',
                                    onClick: () => optOutSystem(inventoryId, true)
                                }
                            ]}
                        />
                    )}
                </VulnerabilityHeader>
                {InventoryBody && (
                    <Main>
                        <InventoryBody />
                    </Main>
                )}
            </Page>
        );
    }
}

function mapStateToProps(state) {
    return {
        systemDetails: state.entityDetails
    };
}

const mapDispatchToProps = () => {
    return {
        optOutSystem: (system, status) => dispatchAction(optOutSystemAction(system, status)),
        fetchSystemDetails: system => dispatchAction(fetchSystemDetails(system))
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(InventoryDetail)
);
