import { Stack, StackItem } from '@patternfly/react-core';
import { routerParams } from '@red-hat-insights/insights-frontend-components';
import { some } from 'lodash';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchCveListByAccount } from '../../../Store/Actions/VulnerabilitiesActions';
import { sCveTableByAccount } from '../../../Store/Selectors/VulnerabilitiesSelectors';
import VulnerabilitiesCveTable from '../VulnerabilitiesCveTable/VulnerabilitiesCveTable';
import VulnerabilitiesCveTableToolbar from '../VulnerabilitiesCveTable/VulnerabilitiesCveTableToolbar';

class VulnerabilitiesCves extends React.Component {
    constructor(props) {
        super(props);
        this.apply = this.apply.bind(this);
        this.sendRequest = this.sendRequest.bind(this);
    }

    componentDidMount() {
        this.sendRequest();
    }

    apply(config) {
        const toBeReset = ['filter', 'page_size'];
        if (some(toBeReset.map(item => config.hasOwnProperty(item)), item => item === true)) {
            config.page = 1;
        }

        this.setState({ ...this.state, ...config }, this.sendRequest);
    }

    sendRequest() {
        this.props.fetchData(() => this.props.fetchResource(this.state));
    }
    render() {
        const cves = this.props.dataSelector(this.props.CVETable);
        return (
            <React.Fragment>
                <Stack gutter="lg">
                    <StackItem>
                        <VulnerabilitiesCveTableToolbar apply={this.apply} />
                    </StackItem>
                    <StackItem>
                        <VulnerabilitiesCveTable header={this.props.header} cves={cves} apply={this.apply} />
                    </StackItem>
                </Stack>
            </React.Fragment>
        );
    }
}

function mapStateToProps(state) {
    return {
        CVETable: state
    };
}

const mapDispatchToProps = () => {
    return {
        fetchData: action => dispatchAction(action())
    };
};

VulnerabilitiesCves.defaultProps = {
    header: [
        { title: 'Impact', key: 'impact', width: 5 },
        { title: 'Name', key: 'synopsis', width: 10 },
        { title: 'Description', key: 'description', width: 60, hasSort: false },
        { title: 'CVSS Base Score', key: 'cvss_score', width: 5 },
        { title: 'Systems Exposed', key: 'systems_affected', width: 5 },
        { title: 'Publish date', key: 'public_date', width: 10 }
    ],
    fetchResource: fetchCveListByAccount,
    dataSelector: sCveTableByAccount
};

VulnerabilitiesCves.propTypes = {
    CVETable: dataShape,
    fetchData: propTypes.func,
    fetchResource: propTypes.func,
    header: propTypes.array,
    dataSelector: propTypes.func
};

export default routerParams(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(VulnerabilitiesCves)
);
