import * as reactCore from '@patternfly/react-core';
import { Page, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import * as pfReactTable from '@patternfly/react-table';
import { Main, SimpleTableFilter } from '@redhat-cloud-services/frontend-components';
import debounce from 'lodash/debounce';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchSystems, setHeader } from '../../../Store/Actions/Actions';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import { sAllSystems } from '../../../Store/Selectors/CVESelectors';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';

/*eslint camelcase: 0*/

class Systems extends React.Component {
    static propTypes = {
        fetchData: propTypes.func,
        systems: dataShape
    };

    constructor(props) {
        super(props);
        this.state = {
            InventoryCmp: () => <div>Loading...</div>,
            filter: '',
            removeListener: () => {},
            columns: [
                { key: 'display_name', title: 'Name', composed: ['facts.os_release', 'display_name'] },
                { key: 'cve_count', title: 'CVEs' },
                { key: 'updated', title: 'Last Seen', isTime: true }
            ]
        };
    }

    componentDidMount() {
        this.props.fetchData();
        this.fetchInventory();
    }

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons,
            pfReactTable
        });
        ReducerRegistry.register({
            ...mergeWithEntities(inventoryEntitiesReducer(this.state.columns)),
            ...mergeWithDetail()
        });

        this.setState({
            InventoryCmp: inventoryConnector().InventoryTable
        });
        this.state.removeListener();
    }

    handleFilterChange = debounce(value => {
        const { meta } = this.props.systems;
        const { page_size } = meta;
        this.setState({ ...this.state, filter: value }, () => this.props.fetchData({ page_size, filter: this.state.filter }));
    }, 400);

    handleRefresh = ({ page, per_page: perPage }) => {
        const { meta } = this.props.systems;
        if (meta.page !== page || meta.page_size !== perPage) {
            this.props.fetchData({
                page: meta.page_size !== perPage ? 1 : page,
                page_size: perPage,
                filter: this.state.filter
            });
        }
    };

    render() {
        const { InventoryCmp } = this.state;
        const { data, meta } = this.props.systems;
        return (
            <Page>
                <VulnerabilityHeader />
                <Main>
                    <InventoryCmp
                        hasCheckbox={false}
                        page={meta.page}
                        total={meta.total_items}
                        perPage={meta.page_size}
                        onRefresh={this.handleRefresh}
                        items={data.map(item => ({
                            id: item.attributes.inventory_id,
                            ...item.attributes
                        }))}
                    >
                        <ToolbarGroup className="systems-toolbar">
                            <ToolbarItem>
                                <SimpleTableFilter
                                    onFilterChange={this.handleFilterChange}
                                    buttonTitle={null}
                                    placeholder="Find a system by UUID"
                                />
                            </ToolbarItem>
                        </ToolbarGroup>
                    </InventoryCmp>
                </Main>
            </Page>
        );
    }
}

function mapStateToProps(state) {
    return {
        systems: sAllSystems(state)
    };
}

const mapDispatchToProps = () => {
    return {
        setHeader: header => dispatchAction(setHeader(header)),
        fetchData: options => dispatchAction(fetchSystems(options))
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(Systems)
);
