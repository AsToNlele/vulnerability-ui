import React from 'react';
import CVERow from '../../Components/PresentationalComponents/Vulnerability/CVERow';
import { ExclamationCircleIcon } from '@patternfly/react-icons';
import { Alignment } from '@patternfly/react-core';

export function getVMaaSCVEs(apiProps) {
    apiProps = { ...apiProps, cve_list: optimizeCveList(apiProps.cve_list) };
    return fetch('https://webapp-vmaas-ci.1b13.insights.openshiftapps.com/api/v1/cves/', {
        method: 'post',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(apiProps)
    })
    .then(function(res) {
        return res.json();
    })
    .then(function(resJson) {
        return processRawCVEs(resJson);
    });
}

export function getCVEsWithSystems(props) {
    return [
        {
            synopsis: 'CVE-2017-5715',
            impact: 'Important',
            systems: 15,
            total_risk: 5,
            description:
                'An industry-wide issue was found in the way many modern microprocessor designs have implemented speculative execution of instructions (a commonly used performance optimization). There are three primary variants of the issue which differ in the way the speculative execution can be exploited. Variant CVE-2017-5715 triggers the speculative execution by utilizing branch target injection. It relies on the presence of a precisely-defined instruction sequence in the privileged code as well as the fact that memory accesses may cause allocation into the microprocessor\'s data cache even for speculatively executed instructions that never actually commit (retire). As a result, an unprivileged attacker could use this flaw to cross the syscall and guest/host boundaries and read privileged memory by conducting targeted cache side-channel attacks.'
        },
        {
            synopsis: 'CVE-2017-5753',
            impact: 'Important',
            systems: 5,
            total_risk: 3,
            description:
                'An industry-wide issue was found in the way many modern microprocessor designs have implemented speculative execution of instructions (a commonly used performance optimization). There are three primary variants of the issue which differ in the way the speculative execution can be exploited. Variant CVE-2017-5715 triggers the speculative execution by utilizing branch target injection. It relies on the presence of a precisely-defined instruction sequence in the privileged code as well as the fact that memory accesses may cause allocation into the microprocessor\'s data cache even for speculatively executed instructions that never actually commit (retire). As a result, an unprivileged attacker could use this flaw to cross the syscall and guest/host boundaries and read privileged memory by conducting targeted cache side-channel attacks.'
        },
        {
            synopsis: 'CVE-2017-5754',
            impact: 'Important',
            systems: 1,
            total_risk: 2,
            description:
                'An industry-wide issue was found in the way many modern microprocessor designs have implemented speculative execution of instructions (a commonly used performance optimization). There are three primary variants of the issue which differ in the way the speculative execution can be exploited. Variant CVE-2017-5715 triggers the speculative execution by utilizing branch target injection. It relies on the presence of a precisely-defined instruction sequence in the privileged code as well as the fact that memory accesses may cause allocation into the microprocessor\'s data cache even for speculatively executed instructions that never actually commit (retire). As a result, an unprivileged attacker could use this flaw to cross the syscall and guest/host boundaries and read privileged memory by conducting targeted cache side-channel attacks.'
        }
    ];
}

export function createCveWithSystemsTable(cves) {
    let modCves = cves.map(cve => {
        return {
            impact: processImpactForTable(cve.impact),
            synopsis: processSynopsisForTable(cve.synopsis),
            systems: processSystemsForTable(cve.systems),
            total_risk: cve.total_risk,
            description: truncate(cve.description, 150)
        };
    });
    let table = modCves.map(cve => {
        return { cells: Object.values(cve) };
    });
    return table;
}

function processSynopsisForTable(synopsis) {
    return (
        <Alignment align="center">
            <b>{synopsis}</b>
        </Alignment>
    );
}

function truncate(str, max) {
    return str.length > max ? str.substr(0, max - 1) + 'â€¦' : str;
}

function processSystemsForTable(number) {
    return (
        <React.Fragment>
            <Alignment align="center">
                <b>{number}</b>
                <br />Systems/Groups
            </Alignment>
        </React.Fragment>
    );
}

function optimizeCveList(cveList) {
    let newList;
    if (cveList) {
        newList = cveList.filter(item => item !== '');
    } else {
        newList = ['.*'];
    }

    newList = cveList.map(item => item + '.*');
    return newList;
}

export function processRawCVEs(rawcves) {
    let cveItems = [];
    for (let row in rawcves.cve_list) {
        let newRow = processCVErow(row, rawcves.cve_list[row]);
        cveItems.push(newRow);
    }

    let page = rawcves.page;
    let pageSize = rawcves.page_size;
    let pages = rawcves.pages;
    return {
        cveItems,
        page,
        pageSize,
        pages
    };
}

function processCVErow(key, data) {
    let modifiedData = {
        ...data,
        synopsis: <b>{data.synopsis}</b>,
        cwe_list: processCWElist(data.cwe_list),
        public_date: processDate(data.public_date),
        modified_date: processDate(data.modified_date),
        impact: processImpact(data.impact),
        redhat_url: processUrl(data.redhat_url),
        secondary_url: processUrl(data.secondary_url)
    };
    return <CVERow key={key} {...modifiedData} />;
}

function processUrl(url) {
    return <a href="{url}">{url}</a>;
}

function processCWElist(cwes) {
    let newList = cwes.map(item => (
        <span className="pf-c-badge pf-m-read" key={item}>
            {item}
        </span>
    ));
    return newList;
}

function processDate(dateString) {
    let date = new Date(dateString);
    return date.toLocaleDateString();
}

function processImpactForTable(impact) {
    switch (impact) {
        case 'High':
        case 'Important':
            return (
                <span>
                    <ExclamationCircleIcon size="lg" color={'var(--pf-global--warning-color--100)'} title={impact} />
                    {impact}
                </span>
            );
        case 'Medium':
        case 'Moderate':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" /> {impact}
                </span>
            );
        case 'Critical':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" style={{ color: '#c00' }} /> {impact}
                </span>
            );
        case 'Low':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" style={{ color: '#72767b' }} /> {impact}
                </span>
            );
    }
}
