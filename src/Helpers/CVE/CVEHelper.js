import React from 'react';
import CVERow from '../../Components/PresentationalComponents/Vulnerability/CVERow';

export function getVMaaSCVEs(apiProps) {
    apiProps = { ...apiProps, cve_list: optimizeCveList(apiProps.cve_list) };
    return fetch('https://webapp-vmaas-ci.1b13.insights.openshiftapps.com/api/v1/cves/', {
        method: 'post',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(apiProps)
    })
    .then(function(res) {
        return res.json();
    })
    .then(function(resJson) {
        return processRawCVEs(resJson);
    });
}

function optimizeCveList(cveList) {
    let newList;
    if (cveList) {
        newList = cveList.filter(item => item !== '');
    } else {
        newList = ['.*'];
    }

    newList = cveList.map(item => item + '.*');
    return newList;
}

export function processRawCVEs(rawcves) {
    let cveItems = [];
    for (let row in rawcves.cve_list) {
        let newRow = processCVErow(row, rawcves.cve_list[row]);
        cveItems.push(newRow);
    }

    let page = rawcves.page;
    let pageSize = rawcves.page_size;
    let pages = rawcves.pages;
    return {
        cveItems,
        page,
        pageSize,
        pages
    };
}

function processCVErow(key, data) {
    let modifiedData = {
        ...data,
        synopsis: <b>{data.synopsis}</b>,
        cwe_list: processCWElist(data.cwe_list),
        public_date: processDate(data.public_date),
        modified_date: processDate(data.modified_date),
        impact: processImpact(data.impact),
        redhat_url: processUrl(data.redhat_url),
        secondary_url: processUrl(data.secondary_url)
    };
    return <CVERow key={key} {...modifiedData} />;
}

function processUrl(url) {
    return <a href="{url}">{url}</a>;
}

function processCWElist(cwes) {
    let newList = cwes.map(item => (
        <span className="pf-c-badge pf-m-read" key={item}>
            {item}
        </span>
    ));
    return newList;
}

function processDate(dateString) {
    let date = new Date(dateString);
    return date.toLocaleDateString();
}

function processImpact(impact) {
    switch (impact) {
        case 'High':
        case 'Important':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" style={{ color: '#f0ab00' }} /> {impact}
                </span>
            );
        case 'Medium':
        case 'Moderate':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" /> {impact}
                </span>
            );
        case 'Critical':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" style={{ color: '#c00' }} /> {impact}
                </span>
            );
        case 'Low':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" style={{ color: '#72767b' }} /> {impact}
                </span>
            );
    }
}
