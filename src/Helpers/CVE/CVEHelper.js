import React from 'react';
import CVERow from 'Components/PresentationalComponents/Vulnerability/CVERow';

/*eslint camelcase: ["error", {properties: "never"}]*/

export function getVMaaSCVEs() {
    return fetch('https://webapp-vmaas-ci.1b13.insights.openshiftapps.com/api/v1/cves/', {
        method: 'post',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            cve_list: ['CVE-2017-.*'],
            modified_since: '2018-04-05T01:23:45+02:00'
        })
    })
    .then(function(res) {
        return res.json();
    })
    .then(function(resJson) {
        return processRawCVEs(resJson.cve_list);
    });
}

export function processRawCVEs(rawcves) {
    let rows = [];
    for (let row in rawcves) {
        let newRow = processCVErow(row, rawcves[row]);
        rows.push(newRow);
    }

    return rows;
}

function processCVErow(key, data) {
    let modifiedData = {
        ...data,
        synopsis: <b>{data.synopsis}</b>,
        cwe_list: processCWElist(data.cwe_list),
        public_date: processDate(data.public_date),
        modified_date: processDate(data.modified_date),
        impact: processImpact(data.impact),
        redhat_url: processUrl(data.redhat_url),
        secondary_url: processUrl(data.secondary_url)
    };
    return <CVERow key={key} {...modifiedData} />;
}

function processUrl(url) {
    return <a href="{url}">{url}</a>;
}

function processCWElist(cwes) {
    let newList = cwes.map(item => (
        <span className="pf-c-badge pf-m-read" key={item}>
            {item}
        </span>
    ));
    return newList;
}

function processDate(dateString) {
    let date = new Date(dateString);
    return date.toLocaleDateString();
}

function processImpact(impact) {
    switch (impact) {
        case 'High':
        case 'Important':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" style={{ color: '#f0ab00' }} /> {impact}
                </span>
            );
        case 'Medium':
        case 'Moderate':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" /> {impact}
                </span>
            );
        case 'Critical':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" style={{ color: '#c00' }} /> {impact}
                </span>
            );
        case 'Low':
            return (
                <span>
                    <i className="fas fa-exclamation-circle" style={{ color: '#72767b' }} /> {impact}
                </span>
            );
    }
}
