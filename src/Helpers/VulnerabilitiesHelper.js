import * as MiscHelper from './MiscHelper';

export function createCveListByAccount(cveList) {
    let isLoading = cveList.isLoading;
    if (!isLoading) {
        let payload = cveList.payload.asMutable();
        let data = payload.data;
        let meta = payload.meta;
        data = data.map(row => ({
            id: row.id,
            cells: [
                MiscHelper.processImpactForTable(row.attributes.impact),
                row.attributes.synopsis,
                MiscHelper.truncate(row.attributes.description, 200),
                row.attributes.cvss_score,
                row.attributes.systems_affected,
                'No',
                MiscHelper.processDate(row.attributes.public_date)
            ]
        }));
        return { data, meta, isLoading };
    }

    return { data: [], meta: {}, isLoading };
}

export function createCveListBySystem(cveList) {
    let isLoading = cveList.isLoading;
    if (!isLoading) {
        let payload = cveList.payload.asMutable();
        let data = payload.data;
        let meta = payload.meta;
        data = data.map(row => ({
            id: row.id,
            cells: [
                MiscHelper.processImpactForTable(row.attributes.impact),
                row.attributes.synopsis,
                MiscHelper.truncate(row.attributes.description, 200),
                row.attributes.cvss_score,
                MiscHelper.processDate(row.attributes.public_date)
            ]
        }));
        return { data, meta, isLoading };
    }

    return { data: [], meta: {}, isLoading };
}

export function createCurrentVulnerabilitiesCard(impacts) {
    let dataSet = impacts.payload;
    let isLoading = impacts.isLoading;
    if (!isLoading) {
        dataSet = impacts.payload;
    }

    dataSet = { content: dataSet, isLoading };
    return dataSet;
}
