let BASE_ROUTE = '/api/v1';

export function createApiCall(endpoint, method, parameters = undefined, data = undefined) {
    if (parameters && method === 'get') {
        let params = Object.keys(parameters)
        .map(key => [
            encodeURIComponent(key)
            .concat('=')
            .concat(encodeURIComponent(parameters[key]))
        ])
        .join('&');
        endpoint = endpoint.concat('?').concat(params);
    }

    return fetch('https://localhost:8300' + BASE_ROUTE + endpoint, {
        method,
        body: JSON.stringify(data)
    }).then(function(res) {
        if (!res.ok) {
            throw new Error(res.statusText);
        }

        return res.json();
    });
}

export function getCveDetails(synopsis) {
    let endpoint = '/cves/' + synopsis + '/details/';
    let result = createApiCall(endpoint, 'get');
    return result;
}

export function getAffectedSystemsByCVE(synopsis) {
    let endpoint = '/cves/' + synopsis + '/affectedsystems/';
    let result = createApiCall(endpoint, 'get');
    return result;
}

export function getChanges() {
    let endpoint = '/vulnerabilities/changes/';
    let result = createApiCall(endpoint, 'get');
    return result;
}

export function getCurrentImpacts() {
    let endpoint = '/vulnerabilities/impacts/';
    let result = createApiCall(endpoint, 'get');
    return result;
}

export function getCveList(apiProps) {
    let defaultProps = {
        sortBy: '',
        filter: '',
        cvss_score: '',
        publicDate: ''
    };
    let parameters = { ...defaultProps, ...apiProps };
    let endpoint = '/vulnerabilities/cves/';
    let result = createApiCall(endpoint, 'get', parameters);
    return result;
}
