import Immutable from 'seamless-immutable';
import * as ActionTypes from '../../Store/ActionTypes';

// Initial State
const initialState = Immutable({
    currentImpacts: {
        isLoading: true,
        payload: {
            critical: 0,
            low: 0,
            important: 0,
            moderate: 0
        }
    },
    changesSinceLastLogin: {
        isLoading: true,
        payload: {
            newVulnerabilities: {
                count: 0,
                percentage: 0,
                direction: ''
            },
            newlyAffectedSystems: {
                count: 0,
                percentage: 0,
                direction: ''
            },
            remediatedCVEs: {
                count: 0,
                percentage: 0,
                direction: ''
            }
        }
    }
});

// Reducer
export const ChangesStore = (state = initialState, action) => {
    let newState;
    switch (action.type) {
        case ActionTypes.FETCH_CHANGES_SINCE_LAST_LOGIN + '_PENDING':
            newState = state.setIn(['changesSinceLastLogin', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_CHANGES_SINCE_LAST_LOGIN + '_FULFILLED':
            newState = state.setIn(['changesSinceLastLogin', 'payload'], action.payload);
            newState = newState.setIn(['changesSinceLastLogin', 'isLoading'], false);
            return newState;

        case ActionTypes.FETCH_CURRENT_IMPACTS + '_PENDING':
            newState = state.setIn(['currentImpacts', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_CURRENT_IMPACTS + '_FULFILLED':
            newState = state.setIn(['currentImpacts', 'payload'], action.payload);
            newState = newState.setIn(['currentImpacts', 'isLoading'], false);
            return newState;

        default:
            return state;
    }
};
