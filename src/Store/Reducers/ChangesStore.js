import * as ActionTypes from '../../Store/ActionTypes';
import Immutable from 'seamless-immutable';

// Initial State
const initialState = Immutable({
    changesSinceLastLogin: {
        isLoading: true,
        newVulnerabilities: {
            number: 0,
            percentage: 0,
            direction: ''
        },
        newlyAffectedSystems: {
            number: 0,
            percentage: 0,
            direction: ''
        },
        remediatedCVEs: {
            number: 0,
            percentage: 0,
            direction: ''
        },
        newlySecuredSystems: {
            number: 0,
            percentage: 0,
            direction: ''
        }
    }
});

// Reducer
export const ChangesStore = (state = initialState, action) => {
    let newState;
    switch (action.type) {
        case ActionTypes.FETCH_CHANGES_SINCE_LAST_LOGIN + '_PENDING':
            newState = state.setIn(['changesSinceLastLogin', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_CHANGES_SINCE_LAST_LOGIN + '_FULFILLED':
            newState = state.setIn(['changesSinceLastLogin'], action.payload);
            newState = newState.setIn(['changesSinceLastLogin', 'isLoading'], false);
            return newState;

        default:
            return state;
    }
};
