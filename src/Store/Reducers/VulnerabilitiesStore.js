import Immutable from 'seamless-immutable';
import * as ActionTypes from '../ActionTypes';

// Initial State
const initialState = Immutable({
    cveList: {
        isLoading: true,
        payload: [],
        timestamp: new Date()
    }
});

function isValid(stateTimestamp, actionTimestamp) {
    return actionTimestamp >= stateTimestamp;
}

// Reducer
export const VulnerabilitiesStore = (state = initialState, action) => {
    let newState;
    switch (action.type) {
        case ActionTypes.FETCH_CVE_LIST + '_PENDING':
            newState = state.setIn(['cveList', 'isLoading'], true);
            newState = newState.setIn(['cveList', 'timestamp'], action.meta);
            return newState;

        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':
            if (isValid(state.cveList.timestamp, action.meta)) {
                newState = state.setIn(['cveList', 'payload'], action.payload);
                newState = newState.setIn(['cveList', 'isLoading'], false);
                newState = newState.setIn(['cveList', 'timestamp'], action.meta);
                return newState;
            }

            return state;

        case ActionTypes.EMPTY_CVE_LIST + '_FULFILLED':
            return initialState;

        case ActionTypes.SYSTEM_CVE_STATUS_LIST + '_FULFILLED':
            newState = state.setIn(['statusList', 'payload'], action.payload);
            newState = newState.setIn(['statusList', 'isLoading'], false);
            return newState;

        default:
            return state;
    }
};
