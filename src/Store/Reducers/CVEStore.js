import Immutable from 'seamless-immutable';
import * as ActionTypes from '../../Store/ActionTypes';

// Initial State
const initialState = Immutable({
    cveList: {
        isLoading: true,
        items: {}
    },
    affectedSystemsByCVE: {
        isLoading: true,
        payload: []
    },
    cveDetails: {
        isLoading: true,
        payload: {}
    }
});

// Reducer
export const CVEReducer = (state = initialState, action) => {
    let newState;
    switch (action.type) {
        case ActionTypes.FETCH_CVES + '_PENDING':
            newState = state.setIn(['cveList', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_CVES + '_FULFILLED':
            newState = state.setIn(['cveList', 'items'], action.payload);
            newState = newState.setIn(['cveList', 'isLoading'], false);
            return newState;

        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':
            newState = state.setIn(['cveDetails', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':
            newState = state.setIn(['cveDetails', 'payload'], action.payload);
            newState = newState.setIn(['cveDetails', 'isLoading'], false);
            return newState;

        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':
            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);
            return newState;

        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':
            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);
            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);
            return newState;

        default:
            return state;
    }
};
